package com.ipodprojects.flows

import co.paralleluniverse.fibers.Suspendable
import com.ipodprojects.contracts.TestContract
import com.ipodprojects.states.TestState
import net.corda.core.contracts.Command
import net.corda.core.flows.*
import net.corda.core.identity.Party
import net.corda.core.transactions.TransactionBuilder
import net.corda.core.utilities.ProgressTracker

// *********
// * Flows *
// *********
@InitiatingFlow
@StartableByRPC
class Send(val value: Int, val animal: String, val responder: Party) : FlowLogic<Unit>() {
    override val progressTracker = ProgressTracker()

    @Suspendable
    override fun call() {
        // Retrieve the notary identity from the network map.
        val notary = serviceHub.networkMapCache.notaryIdentities[0]

        // Create the transaction components.
        val outputState = TestState(value, ourIdentity, responder)
        val outputState = TestState(animal, ourIdentity, responder)
        val command = Command(TestContract.Commands.Action(), ourIdentity.owningKey)

        // Create a transaction builder and add the components.
        val txBuilder = TransactionBuilder(notary = notary)
                .addOutputState(outputState, TestContract.ID)
                .addCommand(command)

        // Sign the transaction.
        val signedTx = serviceHub.signInitialTransaction(txBuilder)

        // Creating a session with the other party.
        val responderSession = initiateFlow(responder)

        // Finalise the transaction and then send it to the counterparty.
        subFlow(FinalityFlow(signedTx, responderSession))
    }

}

@InitiatedBy(Send::class)
class SendResponder(private val responderSession: FlowSession) : FlowLogic<Unit>() {
    @Suspendable
    override fun call() {
        subFlow(ReceiveFinalityFlow(responderSession))
    }
}
